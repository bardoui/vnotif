.v-notification-container {
    display: flex;
    position: fixed;
    flex-direction: column;
    box-sizing: border-box;
    max-width: 100%;
    overflow: hidden;
    width: get-var("v-notif", "container-width", 20rem);
    padding: get-var("v-notif", "container-padding", 1rem);
    z-index: get-var("v-notif", "container-z-index", 2);
    top: 0;
    @if get-var("base", "direction") == "rtl" {
        left: 0;
    } @else {
        right: 0;
    }

    &.is-left-top {
        top: 0;
        bottom: unset;
        left: 0;
        right: unset;
    }
    &.is-right-top {
        top: 0;
        bottom: unset;
        left: unset;
        right: 0;
    }
    &.is-center-top {
        top: 0;
        bottom: unset;
        left: 50%;
        right: unset;
        transform: translateX(-50%);
    }
    &.is-left-bottom {
        top: unset;
        bottom: 0;
        left: 0;
        right: unset;
    }
    &.is-right-bottom {
        top: unset;
        bottom: 0;
        left: unset;
        right: 0;
    }
    &.is-center-bottom {
        top: unset;
        bottom: 0;
        left: 50%;
        right: unset;
        transform: translateX(-50%);
    }

    &.is-sub {
        position: absolute;
        z-index: auto;
    }

    > .v-notification {
        $bg: get-var("v-notif", "background", get-color("container"));
        display: block;
        align-self: stretch;
        justify-self: stretch;
        user-select: none;
        font: inherit;
        background: $bg;
        color: foreground($bg);
        border: 0 solid palette("shade", "700");
        @if get-var("base", "direction") == "ltr" {
            border-left-width: get-var("v-notif", "border-width", 3px);
        } @else {
            border-right-width: get-var("v-notif", "border-width", 3px);
        }
        box-shadow: get-var(
            "v-notif",
            "shadow",
            (
                rgba(palette("shade", "900"), 0.27) 0px 0px 0.25em,
                rgba(palette("shade", "900"), 0.05) 0px 0.25em 1em
            )
        );

        &.is-ltr {
            border-width: 0;
            border-left-width: get-var("v-notif", "border-width", 3px);
        }

        &.is-rtl {
            border-width: 0;
            border-right-width: get-var("v-notif", "border-width", 3px);
        }

        &:not(:last-child) {
            margin-bottom: 1rem;
        }

        > .v-notification-content {
            padding: get-var("v-notif", "padding", 1rem);

            h1 {
                margin: 0;
                font-size: 1rem;
                margin-bottom: 1rem;
                font-weight: bold;
            }

            p {
                margin: 0;
                padding: 0;
                font-size: 1rem;
            }

            .v-notification-actions {
                display: flex;
                flex-direction: row;
                justify-content: flex-end;
                margin-top: get-gap("element");
            }

            .v-notification-action {
                @include control();
                width: auto;
                border: none;
                text-align: center;
                border-radius: get-var("radius", "normal");
                padding: (get-gap("element") / 2) get-gap("element");
                transition: all get-var("transition", "duration");
                text-decoration: none;
                text-shadow: none;
                cursor: pointer;
                background: transparent;
                font-weight: bold;

                &:disabled,
                &.is-disabled {
                    color: palette("shade", "300");
                }

                &:not(.is-default):not(:disabled):not(.is-disabled) {
                    color: palette("shade", "300");

                    &:hover {
                        color: readable(get-color("primary"), $bg);
                    }
                }

                &.is-default:not(:disabled):not(.is-disabled) {
                    color: readable(get-color("primary"), $bg);
                    &:hover {
                        background: palette("primary", "100");
                    }
                }
            }
        }

        > .v-notification-progress {
            display: block;
            height: get-var("v-notif", "progress-size", 1px);
            background-color: palette("shade", "400");
            transition: all 100ms linear;
        }

        &.is-loading {
            @include overlay($color: rgba($bg, 0.5));
            @include loader(
                $size: 1.5rem,
                $color: readable(get-color("primary"), $bg)
            );
        }

        @each $name, $color in iterate-colors() {
            &.is-#{$name} {
                border-color: readable($color, $bg);
                box-shadow: get-var(
                    "v-notif",
                    "shadow-" + #{$name},
                    (
                        rgba(palette($name, "900"), 0.27) 0px 0px 0.25em,
                        rgba(palette($name, "900"), 0.05) 0px 0.25em 1em
                    )
                );

                > .v-notification-content {
                    h1 {
                        color: readable($color, $bg);
                    }

                    .v-notification-action {
                        &:not(.is-default):not(:disabled):not(.is-disabled) {
                            &:hover {
                                color: readable($color, $bg);
                            }
                        }

                        &.is-default:not(:disabled):not(.is-disabled) {
                            color: readable($color, $bg);
                            &:hover {
                                background: palette($name, "100");
                            }
                        }
                    }
                }

                .v-notification-progress {
                    background-color: readable($color, $bg);
                }

                &.is-loading {
                    @include loader(
                        $size: 1.5rem,
                        $color: readable($color, $bg)
                    );
                }
            }
        }
    }
}
