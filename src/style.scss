@import "@bardoui/termeh/scss/core.scss";
.v-notification-container {
    display: flex;
    position: fixed;
    flex-direction: column;
    box-sizing: border-box;
    max-width: 100%;
    overflow: hidden;
    padding: _gap("container");
    width: 0rem;
    z-index: 2;
    top: 0;
    #{if(_var("base", "direction") == "rtl", left, right)}: 0;

    &.is-left-top {
        top: 0;
        bottom: unset;
        left: 0;
        right: unset;
    }

    &.is-right-top {
        top: 0;
        bottom: unset;
        left: unset;
        right: 0;
    }

    &.is-center-top {
        top: 0;
        bottom: unset;
        left: 50%;
        right: unset;
        transform: translateX(-50%);
    }

    &.is-left-bottom {
        top: unset;
        bottom: 0;
        left: 0;
        right: unset;
    }

    &.is-right-bottom {
        top: unset;
        bottom: 0;
        left: unset;
        right: 0;
    }

    &.is-center-bottom {
        top: unset;
        bottom: 0;
        left: 50%;
        right: unset;
        transform: translateX(-50%);
    }

    &.is-sub {
        position: absolute;
        z-index: auto;
    }

    > .v-notification {
        display: block;
        align-self: stretch;
        justify-self: stretch;
        user-select: none;
        font: inherit;
        background: _color("container");
        color: _color("foreground");
        box-shadow: shadow(0, 3px, _color("shade"), false),
            shadow(0, 6px, _color("shade"), true);

        > .content {
            padding: _gap("element");

            > :not(:last-child) {
                margin-bottom: _gap("element");
            }

            h1,
            h2,
            h3,
            h4,
            h5,
            h6,
            > .header {
                margin: 0;
                font-size: 1em;
                font-weight: bold;
            }

            > p {
                margin: 0;
                padding: 0;
                font-size: 1em;
            }

            > .actions {
                display: flex;
                flex-direction: row;
                justify-content: flex-end;

                > .action {
                    @include control();
                    width: auto;
                    border: none;
                    text-align: center;
                    text-decoration: none;
                    text-shadow: none;
                    border-radius: get-var("radius", "normal");
                    padding: e-pad(_gap("element") / 2);
                    transition: all get-var("transition", "duration")
                        get-var("transition", "ease");
                    cursor: pointer;
                    background: transparent;
                    font-weight: bold;

                    &:disabled,
                    &.is-disabled {
                        color: _color("mute");
                    }

                    &:not(.is-default):not(:disabled):not(.is-disabled) {
                        color: _color("mute");

                        &:hover {
                            color: _color("foreground");
                        }
                    }

                    &.is-default:not(:disabled):not(.is-disabled) {
                        color: _color("foreground");
                        &:hover {
                            background: harmony(
                                _color("container"),
                                _palette("shade", "100"),
                                _palette("shade", "800")
                            );
                        }
                    }
                }
            }
        }

        > .progress {
            display: block;
            height: 1px;
            background-color: _color("shade");
            transition: all 100ms linear;
        }

        &:not(:last-child) {
            margin-bottom: _gap("element");
        }

        &.is-decorated {
            @if _var("base", "direction") == "rtl" {
                border-right: _var("decorator", "size")
                    solid
                    _color("foreground");
            } @else {
                border-left: _var("decorator", "size")
                    solid
                    _color("foreground");
            }
        }

        &.is-loading {
            @include overlay(_color("overlay"));
            @include spinner(
                $size: _var("spinner", "size", 2rem),
                $color: foreground(_color("overlay")),
                $width: _var("decorator", "size", 2px)
            );
        }
    }
}
